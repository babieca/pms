{"file":"GEOPOLITICAL STRATEGY
SPECIAL REPORT

2018 Key Views, Part I: Five Black Swans

BCA House
View Matrix

December 6, 2017
In this Issue:
FF Black Swan 1: Lame

FF

Geopolitical risks were overstated in 2017, but have now become understated;

FF

If Donald Trump becomes an early “lame duck” president, he will seek relevance abroad;

FF

This could mean a protectionist White House, or increased geopolitical tensions with
Iran and North Korea;

FF

North Korean internal stability could come into question as economic sanctions begin
to bite;

FF

Political risks in the U.K. and Italy could rise with markets overly complacent on both;

FF

Emerging markets, particularly Brazil and Mexico, will see renewed political risk.

Duck Trump ............. 3
FF Black Swan 2: A Coup

In Pyongyang............ 8
FF Black Swan 3:

Prime Minister
Jeremy Corbyn........ 10
FF Black Swan 4: Italy Is

A Black Swan Hiding In
Plain Sight............. 12
FF Black Swan 5:

Bloodbath In Latin
America.................. 16

Editorial Board
Marko Papic
Senior Vice President
Chief Geopolitical Strategist
Matt Gertken
Associate Vice President
Geopolitical Strategy

Jesse Anak Kuri
Research Analyst

Ekaterina
Shtrevensky
Research Assistant

Peter Berezin
Senior Vice President
Chief Global Strategist

Martin Barnes
Senior Vice President
Economic Advisor

B

uoyant global growth, political stability in Europe, and steady policymakers’ hands
in China have fueled risk assets in 2017. As the year draws to a close, investors also
have tax cuts in the U.S. to celebrate.

Our high conviction view that tax cuts would happen – and that they would be fiscally
profligate – is near the finish line.1 In making this call, we ignored the failure to repeal
Obamacare, the “wisdom” of old “D.C. hands,” and direct intelligence from a source inside
the White House circle who swore tax reform would be revenue neutral. Throughout the
year, BCA’s Geopolitical Strategy remained confident that the GOP would ignore its fiscal
conservative credentials and focus on the midterm elections.2 That election is increasingly
looking like a bloodbath-in-the-making for the Republican Party (Chart 1).

Jim Mylonas
Vice President
Client Advisory
& BCA Academy

David Boucher
Associate Vice President
Quantitative Strategist

1

Please see BCA Geopolitical Strategy, “U.S. Election: Outcomes & Investment Implications,” dated November 9, 2016,
and “Constraints & Preferences Of The Trump Presidency,” dated November 30, 2016, available at gps.bcaresearch.com.

2

Please see BCA Geopolitical Strategy, “Reconciliation And The Markets – Warning: This Report May Put You To Sleep,”
dated May 31, 2017, “How Long Can The ‘Trump Put’ Last?” dated June 14, 2017, and “Is King Dollar Back?” dated
October 4, 2017, available at gps.bcaresearch.com.

editor@bcaresearch.com • www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

1

252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

Discover
what you
can do
with BCA
Analytics.

CHART 1
%

CHART 2

Midterm Election: A Bloodbath?

%

U.S.
GENERIC CONGRESSIONAL VOTE:
DEMOCRATS
REPUBLICANS

50

80
%

Republican Base Supports Tax Cuts
SUPPORT FOR REPUBLICAN TAX BILL:

50

OCTOBER 2017

48

48

46

46

44

44

NOVEMBER 2017
60

40
42

42

40

40

38

38

36

36
© BCA Research 2017

MAY

JUN

JUL

AUG

SEP

OCT

NOV

DEC

2017
.
SOURCE: REALCLEARPOLITICS.

20

0

© BCA Research 2017

OVERALL

REPUBLICANS

DEMOCRATS

SOURCE: REUTERS/IPSOS.

What of the latest opinion polls showing that the tax cuts are unpopular with half of all Americans?
The polls also show that a solid one-third of all Americans remain in support of the Republican
plan (Chart 2). We suspect – as do Republican strategists – that those are the Republicans who
vote in midterm elections. Given the atrociously low turnout in midterm elections – just 36.4% of
Americans voted in 2014 – Republicans need their base to turn out in November. The tax cuts are
not about the wider American public but the Republican base.
As we close the book on 2017, we look with trepidation towards 2018. Our main theme for next
year is that the combination of economic stimulus from the tax cuts in the U.S. and structural
reforms in China will create a U.S.-dollar-bullish policy mix that will combine into a headwind for
global risk assets, particularly emerging market equities.3 However, in this report, we focus on some
of the more exotic risks that investors may have to deal with.
In particular we focus on five potential “black swans” – low probability, high market-impact events
– that are neither on the market’s radar nor the media’s.

3

Please see BCA Geopolitical Strategy, “Geopolitics – From Overstated To Understated Risks,” dated November 22, 2017, available
at gps.bcaresearch.com.

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

2
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

When
domestic
constraints
rise, U.S.
presidents
seek
relevance
abroad.

To qualify for our list, the events must be:
FF

Unlikely: There must be less than a 20% probability that the event will occur in the next 12
months.

FF

Out of sight: The scenario we present should not be receiving media coverage, at least not as
a serious market risk.

FF

Geopolitical: We must be able to identify the risk scenario through the lens of our geopolitical
methodology. Genuinely unpredictable events – such as meteor strikes, pandemics, crippling
cyber-attacks, solar flares, alien invasions, and failures in the computer program running the
simulation that we call the universe – do not make the cut.

Black Swan 1: Lame Duck Trump
“Lame duck” presidents – leaders whose popularity late in their term has sunk so low that they can
no longer affect policy – are said to be particularly adventurous in the foreign arena. While this adage has a spotty empirical record, there are several notable examples in recent memory.4 American
presidents have few constitutional constraints when it comes to foreign policy. Therefore, when
domestic constraints rise, U.S. presidents seek relevance abroad.
President Trump may become the earliest, and lamest, lame duck president in recent U.S. history.
While his Republican support remains healthy, his overall popularity is well below the average presidential approval rating at this point in the political cycle (Chart 3). Based on these poll numbers, his
party is likely to underperform in the upcoming midterm election (Chart 4). A Democrat-led House
of Representatives would have the votes to begin impeachment, which we would then consider likely
in 2019. As we have argued in our “impeachment handbook,” the market impact of such a crisis
would ultimately depend on market fundamentals and the global context, not political intrigue.5
President Trump’s political capital ahead of the midterm elections is based on his ability to influence Republican legislators. Despite low overall poll numbers, President Trump can use the threat
of endorsing primary challengers against conservative peers in Congress to move his agenda in the
legislature. He has effectively done this with tax cuts. However, the day after the midterm elections,
President Trump’s own numbers will matter for the GOP. Given that President Trump will be on the
ballot in the 2020 general election, his low approval numbers with non-Republican voters will hang

4

President Clinton launched the largest NATO military operation against Yugoslavia amidst impeachment proceedings against him
while President George H. W. Bush ordered U.S. troops to Somalia a month after losing the 1992 election. Ironically, President
George H. W. Bush intervened in Somalia in order to lock in the supposedly isolationist Bill Clinton, who had defeated him three
weeks earlier, into an internationalist foreign policy. President George W. Bush ordered the “surge” of troops into Iraq in 2007 after
losing both houses of Congress in 2006; President Obama arranged the Iranian nuclear deal after losing the Senate (and hence
Congress) to the Republicans in 2014.

5

Please see BCA Geopolitical Strategy, “Break Glass In Case Of Impeachment,” dated May 17, 2017, available at gps.bcaresearch.com.

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

3
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

President
Trump may
become the
earliest, and
lamest,
lame duck
president in
recent U.S.
history.
While his
Republican
support
remains
healthy,
his overall
popularity is
well below
the average
presidential
approval
rating at
this point in
the political
cycle.

CHART 3
%
70

The Day After The Midterms, Trump’s Overall Popularity Will Matter More Than That Among Republicans
100
%

AVERAGE PRESIDENTIAL APPROVAL RATINGS

AVERAGE REPUBLICAN PRESIDENTS
APPROVAL RATINGS AMONG REPUBLICAN VOTERS

95

90

60

85

80

50
AVERAGE*

75

TRUMP
70

40

AVERAGE REPUBLICAN
PRESIDENTS*
TRUMP

65

30

© BCA Research 2017

© BCA Research 2017

1

5

9

13

17

21

25

29

33

37

41

45

60

49

1

5

9

13

17

21

25

29

33

37

41

45

49

WEEKS IN OFFICE

WEEKS IN OFFICE
* INCLUDES OBAMA, BUSH, CLINTON, BUSH SR., REAGAN, CARTER,
NIXON, KENNEDY, AND EISENHOWER. PRESIDENTS FORD AND
JOHNSON ARE EXCLUDED BECAUSE THEY WERE NOT INAUGURATED.
SOURCE: GALLUP AND THE AMERICAN PRESIDENCY
PROJECT, UNIVERSITY OF CALIFORNIA.			
						
						
		

* INCLUDES BUSH JR., BUSH SR., REAGAN, NIXON, AND EISENHOWER.
PRESIDENT FORD IS EXCLUDED BECAUSE HE WAS NOT INAUGURATED.
SOURCE: GALLUP.					
						
					

CHART 4

Trump Is Becoming A Liability For The GOP
20

PRESIDENT’S APPROVAL VS. PARTY RESULTS IN MIDTERM ELECTIONS

HOUSE SEATS LOST/GAINED IN MIDTERMS

10

GEORGE W. BUSH

0
GEORGE BUSH

-10

RONALD REAGAN

RICHARD NIXON

-20

DWIGHT D. EISENHOWER

RONALD REAGAN
GEORGE W. BUSH

-30

-40

GERALD R.
FORD (NIXON)
TRUMP

-50

DWIGHT D. EISENHOWER

© BCA Research 2017

-60

25

30

35

40

45

50

55

60

65

70

PRESIDENT’S APPROVAL BEFORE MIDTERMS

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

4
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

Neither the
North Korean
situation
nor the
trade deficit
has seen
substantial
improvement.

like an albatross around the party’s neck. This
is a serious issue, particularly given that 22 of
the 33 Senators up for reelection in 2020 will
be Republican.6
Robust economic growth and a roaring stock
market have not boosted Trump’s popularity
so far. At the same time, a strong economy
ready to translate into higher wages is about
to be “pump-primed” by stimulative tax cuts
(Chart 5). We would expect the result to be a
stronger dollar, which should keep the U.S.
trade deficit widening well into Trump’s second year in office. At some point, this will
become a sore political point, given Trump’s
protectionist rhetoric and his administration’s
focus on the trade balance as a key measure
of U.S. power.
What kind of adventures would we expect to see
President Trump embark on in 2018? There are
three prime candidates:
FF

6

China-U.S. trade war: The Trump administration started off with threats against
China and then proceeded to negotiations.
However, neither the North Korean situation
nor the trade deficit has seen substantial
improvement, and a lame duck Trump administration would be more likely to resort
to serious punitive actions. Even improvements on the Korean peninsula would
not necessarily prevent Washington from
getting tougher on Beijing over trade, as
the Trump administration will be driven by
domestic politics. Investors should carefully
watch whether the World Trade Organization
deems China a “market economy,” which

CHART 5
%
40

Wage Pressures Are Building

%

U.S.
NFIB* SURVEY: PERCENT OF FIRMS
REPORTING HIGHER COMPENSATION
LAST 3 MONTHS
IN NEXT 3 MONTHS

40

30

30

20

20

10

10

0

0

%

%

INDUSTRY DEMAND SURVEY DIFFUSION INDEX:
WAGES AND SALARIES**

40

40

30

30

20

20

10

10

0

0

Ann%
Chg
10

06

10

14

18

Ann%
Chg

WAGE AND SALARY DISBURSEMENTS*** (LS)
NFIB* JOB OPENINGS PLUS HIRING
PLANS**** (ADVANCED BY 6 MONTHS, RS)

20

10
5
0

0

-10

-5

© BCA Research 2017

98

02

06

10

14

-20

18

* NATIONAL FEDERATION OF INDEPENDENT BUSINESS.
** SOURCE: NATIONAL ASSOCIATION FOR BUSINESS ECONOMICS.
*** SOURCE: BUREAU OF ECONOMIC ANALYSIS.
**** SHOWN SMOOTHED EXCEPT FOR LATEST DATA POINT.

Particularly vulnerable, in our view, will be Cory Gardner (R, Colorado), Joni Ernst (R, Iowa), Susan Collins (R, Maine), and Thom
Tillis (R, North Carolina).

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

5
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

Empirical
evidence
suggests that
the Trump administration
has picked up
the pace of
protectionist
rulings.

CHART 6
200
180
160
140

Trump: Game Changer In U.S. Trade Policy?
U.S. POLICY INTERVENTION*
BENEFITING REST OF G20
HARMING REST OF G20

120
100
80

More discrimination, less liberalization
in 2017 than under Obama II

60
40
20
0

© BCA Research 2017

OBAMA II: 2013

OBAMA II: 2014

OBAMA II: 2015

OBAMA II: 2016

OBAMA II AVERAGE

TRUMP: 2017

* TOTAL NUMBER OF TIMES G20 COMMERCIAL INTERESTS AFFECTED BY U.S. POLICIES IMPLICATING CROSS-BORDER COMMERCE REPORTED BETWEEN JANUARY AND JULY OF EACH YEAR.
NOTE: THE DATA ONLY INCLUDES G20 COMMERCIAL INTERESTS AFFECTED BY POLICY ACTIONS BETWEEN JANUARY AND JUNE OF EACH YEAR DUE TO THE
FACT THAT DATA COLLECTION FINISHED ON JUNE 24, 2017.
SOURCE: EVENETT, SIMON J. AND JOHANNES FRITZ, “WILL AWE TRUMP RULES?,” DATED JULY 3, 2017, AVAILABLE AT GLOBALTRADEALERT.ORG/REPORTS/42.

could trigger a U.S. backlash, and whether the various investigations by U.S. Trade Representative
Robert Lighthizer and Commerce Secretary Wilbur Ross result in anti-dumping and countervailing duties being imposed more frequently on specific Chinese exports. Thus far, the empirical
evidence suggests that the Trump administration has picked up the pace of protectionist rulings
(Chart 6). Notably, the Trump administration claims that the Comprehensive Economic Dialogue
has “stalled,” and it is reviving deeper, structural demands on Chinese policymakers.7
FF

Iran Jingoism: Rumors that Secretary of State Rex Tillerson may be replaced by CIA Director
Mike Pompeo – who would be replaced at the CIA by Senator Tom Cotton – can only mean one
thing: the White House has Iran in its sights. Both Pompeo and Cotton are hawks on Iran. The
administration may be preparing to shift its focus from North Korea, where American allies in
the region are urging caution, to the Middle East, where American allies in the region are urging
aggression. Investors should watch whether Tillerson is removed and especially how Congress
reacts to President Trump’s decision on October 15 to decertify the Iran nuclear agreement (also
called the Joint Comprehensive Plan of Action or JCPOA). The Republican-controlled Congress
has until December 15 to reimpose sanctions on Iran that were suspended as part of the deal,
with merely a simple majority needed in both chambers. However, President Trump will also
have an opportunity, as early as January, to end waivers on a slew of sanctions that were not
covered under the JCPOA.

7

U.S. Treasury Under Secretary for International Affairs David Malpass recently claimed that high-level talks had “stalled” and
re-emphasized the U.S.’s structural complaints: “We are concerned that China’s economic liberalization seems to have slowed
or reversed, with the role of the state increasing … State-owned enterprises have not faced hard budget constraints and China’s
industrial policy has become more and more problematic for foreign firms. Huge export credits are flowing in non-economic ways
that distort markets.” The growing presence of Communist Party cells within corporations is another important structural concern
that puts the administration at loggerheads with China’s leaders. Please see Andrew Mayeda and Saleha Mohsin, “US Rebukes
China For Backing Off Market Embrace,” Bloomberg, November 30, 2017, available at www.bloomberg.com.

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

6
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

Risk premium
for oil prices
should rise in
2018.

FF

North Korea: It would be natural to slot
North Korea as first on our list of potential
foreign policy adventures for President
Trump. However, it does not really fit our
qualification of a black swan. North Korea
is not “out of sight.” Additionally, President
Trump has already broken with the tradition
of previous administrations by upping the
pressure on Pyongyang. In fact, a North
Korean black swan would be if President
Trump succeeded in breaking the regime in
Pyongyang. To that scenario we turn next.

CHART 7

2017 Goldilocks: S&P 500 Up, VIX Down
2600

U.S.
S&P 500

2600

2200

2200

1800

1800

1400

1400

1000

1000

VIX*

Bottom Line: Geopolitics has not affected the
50
50
markets in 2017, with risk assets reaching record
highs and the VIX reaching record lows (Chart 7).
40
40
This was our view throughout the year and we
called for investors to “buy in May and have
30
30
a nice day” as a result of our analysis.8 We do
not see this as likely in 2018. The Trump ad20
20
ministration has no credible legislative agenda
after tax cuts. We expect Congress to stall as
10
10
© BCA Research 2017
we enter the summer primary season and for
the GOP to lose the House to the Democrats.
10
12
14
16
18
* CHICAGO BOARD OPTION EXCHANGE SPX VOLATILITY INDEX.
President Trump is an astute political analyst
and will sense these developments before they
happen. There is a good chance that he will
attempt to sway the election and pre-empt his lame duck status with an aggressive foreign policy.
Investment implications are twofold. First, we continue to recommend an equally weighted basket
of Swiss 10-year bonds and gold as a portfolio hedge.9 Second, risk premium for oil prices should
rise in 2018. Not only is the supply-demand balance favorable for oil prices, but geopolitical risks
are likely to rise as well.

8

Please see BCA Geopolitical Strategy, “Buy In May And Enjoy Your Day!” dated April 26, 2017, available at gps.bcaresearch.com.

9

Please see BCA Geopolitical Strategy, “Can Pyongyang Derail The Bull Market?” dated August 16, 2017, available at gps.
bcaresearch.com.

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

7
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

China has
upped the
economic
pressure on
Pyongyang.

Black Swan 2: A Coup In Pyongyang
Our colleague Peter Berezin, BCA’s Chief Global Strategist, has suggested that a coup d’état against
Supreme Leader Kim Jong-un could be a black swan trigger that spooks the markets.10 While Peter
used the scenario as a tongue-in-cheek way to weave Kim into a narrative that tells of a late 2019
recession, we have long raised North Korean domestic politics as the true Korean black swan.11
Here we entertain Peter’s idea for three reasons.12
First, China has upped the economic pressure on Pyongyang. Under Kim Jong-un, the North Korean state has attempted some limited economic “opening up,” namely to China. But the attempt
to finalize the nuclear deterrent has delayed an already precarious process. There has now been a
$617 million drop in Chinese imports from the country since the beginning of the year (Chart 8),
with coal imports particularly affected (Chart 9). China has also pulled back on tourism. Meanwhile,
North Korea’s imports of Chinese goods have risen, which suggests that the country’s current account balance may be widening. At some point, if these trends continue, Pyongyang will run out of
foreign currency with which to purchase Chinese and Russian imports.
CHART 8
Bn
USD

CHART 9

China Is Turning The Screws On Pyongyang…

Bn
USD

CHINA:
IMPORTS FROM NORTH KOREA
EXPORTS TO NORTH KOREA

4

4

3

Mn
USD

… Particularly On Coal Imports

180

$617 Mn
drop

1

140

140

100

100

60

60

20

20

2

1

© BCA Research 2017

02

04

06

08

10

12

14

16

SOURCE: CEIC.

11

12

180

3

2

10

Mn
USD

CHINA:
COAL IMPORTS FROM NORTH KOREA
36-MONTH MOVING AVERAGE

© BCA Research 2017

18

08

10

12

14

16

18

SOURCE: CEIC.

Please see BCA Global Investment Strategy, “A Timeline For The Next Five Years: Part II,” dated December 1, 2017, available at
gis.bcaresearch.com.
Please see “North Korea: From Overstated To Understated” in BCA Geopolitical Strategy, “Strategic Outlook 2016: Multipolarity
& Markets,” dated December 9, 2015, available at gps.bcaresearch.com. A notable coup attempt occurred in 1995-96 in North
Hamgyong; something like a coup attempt may have occurred in 2013; and defectors from North Korea have reported various
stories of plots and conspiracies against the regime.
After all, Peter predicted that Donald Trump would be a serious candidate for the U.S. presidency back in September 2015!

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

8
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

Pyongyang
could miscalculate and
create a crisis
from which
it cannot
deescalate.

Second, Pyongyang is well aware of pressures against the regime. The assassination of Kim Jongnam – the older half-brother of Kim Jong-un – in February of this year sent a message to the world,
but especially to China, which kept Kim Jong-nam around as an alternative to the current Kim.
That Pyongyang went to the extreme lengths of poisoning Kim Jong-nam with VX nerve agent in
a foreign airport suggests that Kim Jong-un is still worried about threats to his rule.13 If Beijing’s
economic sanctions continue to tighten in 2018, the military could conceivably see the Supreme
Leader’s aggressive foreign policy as a risk to regime survival.
Third, Pyongyang could miscalculate and create a crisis from which it cannot deescalate. A provocation that disrupts international infrastructure and commerce or kills civilians from the U.S. or
Japan could trigger a downward spiral. For instance, an attack against international shipping in
the Yellow Sea or Sea of Japan by North Korean submarines would be an unprecedented act that
the U.S. and Japan would likely retaliate against.14 We could see the U.S. following the script from
Operation Praying Mantis in the Persian Gulf in 1988 – the largest surface engagement by the U.S.
Navy since the Second World War. In that incident, the U.S. sunk half of Iran’s navy in retaliation
for the mining of the guided missile frigate USS Samuel B. Roberts. In the case of North Korea,
this would primarily mean taking out its approximately 20 Romeo-class submarines and an unknown
number of domestically-produced – Yugoslav-designed – newly built submarines.
Such a conflict is not our baseline case, but we assign much higher probability to it than an all-out
war on the Korean Peninsula. How would Pyongyang react to the sinking of its submarines?
Our best case is that the regime would do nothing. The leadership in Pyongyang is massively
constrained by its quantifiable military inferiority. True, North Korea has around 6 million military
personnel – about 25% of the total population is under arms – but unfortunately for Pyongyang,
this large army is arrayed against one of the most sophisticated defenses ever constructed by man:
the Demilitarized Zone (DMZ). To support its ground forces, North Korea would have at its disposal
only about 20-30 Mig-29s. Countering two dozen jets would be South Korea’s combined 177 F-15s
and F-16s, plus American forces that would vary in size depending on how many aircraft carriers
were deployed in the vicinity. Given that a single American aircraft carrier holds up to 48 fighter
jets, North Koreans would quickly find themselves fighting a losing battle.
Which is why they may never initiate one. If Kim Jong-un insists on retaliation, the military could
remove and replace him with, for instance, his 30-year old sister, who has recently risen in party
ranks, or his 36-year old brother Kim Jong-chul, who is apparently not entirely uninvolved in the
regime despite living an unassuming life in Pyongyang.

13

14

Still worried, that is, even after Kim Jong-un’s supposed “consolidation of power” in 2013-14 when he executed his influential
and China-aligned uncle, Jang Song Thaek, and purged the latter’s faction. There were reports of rogue military operations at that
time. With low troop morale reported by North Korean defectors, the possibility of insubordination cannot be ruled out.
A North Korean submarine sank the South Korean corvette Cheonan in 2010, and North Korean artillery shelled two islands killing
South Korean civilians later that year, but these attacks were still within the norm of North Korean provocations. The two countries
are still technically at war and have contested maritime as well as land borders.

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

9
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

Latest polls
suggest that
“Bremorse”
has set in.

What would a regime change mean for the markets? It depends on whether it is successful or not.
An unsuccessful coup could lead to a massive purge and likely a total break in Pyongyang’s relations
with the outside world, including China. This would seriously destabilize North Korea’s decisionmaking. The global community would have to begin contemplating a total war on the Korean peninsula. Alternatively, a successful coup could lead to temporary volatility, yet long-term stability.
The military regime in the North may even be open to reunification over the long term, depending
on how U.S.-China relations evolve.
Bottom Line: China does not want to cripple North Korea or throw a coup. But it is cooperating with
sanctions and could therefore trigger one by mistake. At least two regimes have collapsed in the past
when facing the pincer movement of economic sanctions and American military pressure – South
Africa’s apartheid regime in 1991 and Slobodan Miloševic’s Yugoslavia in 1999. Kim Jong-un could
face a similar fate, particularly if China applies excessive economic pressure.

Black Swan 3: Prime Minister Jeremy Corbyn
There is no election scheduled in the U.K. for 2018, but if one were to be held the ruling Tories
would be in trouble (Chart 10). In fact, the combined anti-Brexit forces are currently in a solid
lead over the pro-Brexit parties, Conservatives and the U.K. Independence Party (UKIP) (Chart 11).

CHART 10

CHART 11

Labour Is In The Lead…
%

%
U.K.
VOTING INTENTIONS:
LABOUR
CONSERVATIVE

%

…As Are Anti-Brexit Forces Writ-Large
U.K.
VOTING INTENTIONS:
PRO-BREXIT*
ANTI-BREXIT**

%

56

46

56

44

44

54

42

42

52

40

40

50

50

38

38

48

48

36

36

46

46

34

34

44

44

46

June 2017
general
election

Referendum
on EU
membership

52

© BCA Research 2017

JUN

JUL

AUG

SEP

OCT

NOV

DEC

2017
.
NOTE: BOTH SERIES SHOWN AS 15-DAY MOVING AVERAGE.
SOURCE: U.K. POLLING REPORTS.

editor@bcaresearch.com •

© BCA Research 2017
JAN

APR

JUL

2016

OCT

JAN

APR

JUL

2017

OCT

* INCLUDES CONSERVATIVE AND UKIP.
** INCLUDES LABOUR, LIBERAL DEMOCRATS, SNP AND GREEN.
NOTE: BOTH SERIES SHOWN AS 30-DAY MOVING AVERAGE.
SOURCE: U.K. POLLING REPORTS.

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

54

10
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

A clear
majority
in the U.K.
thinks that
Brexit was a
bad idea.

CHART 12
What could trigger such an election? Ultimately,
Bremorse Sets In
the final exit deal may prompt a new election.
%
%
More immediately, the ongoing negotiations
U.K.
BREXIT SUPPORT:
over the status of the Irish border would be a
FOR
47
47
AGAINST
prime candidate. As our colleague Dhaval Joshi,
head of BCA’s European Investment Strategy
46
46
noted recently, Prime Minister Theresa May’s
government is propped up by the Northern
Irish Unionists to whom May has promised that
45
45
there will be no hard border between Northern
Ireland and the Republic of Ireland. This will
44
44
likely create a crisis as the EU negotiations may
inadvertently threaten the Good Friday peace
43
43
agreement. The Northern Ireland Unionists will
not tolerate the border moving to the Irish Sea.
42
42
This would effectively take Northern Ireland
into the EU customs union and single market,
© BCA Research 2017
and out of the U.K.’s domestic trading zone. It
JAN
APR
JUL
OCT
2017
would also embolden Scotland’s push for single
THE QUESTION ASKS "IN HINDSIGHT, DO YOU THINK BRITAIN WAS
RIGHT OR WRONG TO VOTE TO LEAVE THE EU?"
market access. In essence, the Tory government
NOTE: BOTH SERIES SHOWN AS A 15-DAY MOVING AVERAGE.
SOURCE: WHAT UK THINKS.
may collapse because of differences within the
U.K.’s “three kingdoms” before it even has the chance to collapse over differences with the EU.15

The market may cheer a Labour-Scottish National Party (SNP) coalition government, a potential
winner of an early election, as it would mean that a new referendum on the U.K. leaving the EU
could be held. The latest polls suggest that “Bremorse” (remorse for Brexit) has set in, as a clear
majority in the U.K. thinks that Brexit was a bad idea (Chart 12). However, we suspect that it
would take Prime Minister Jeremy Corbyn several months, if not over a year, before he called such
a referendum. First, Corbyn is on record supporting a soft Brexit, not a new referendum, and he has
only just begun to adjust this position. Second, a soft Brexit is far more difficult to achieve than the
hard Brexit of Prime Minister Theresa May since it requires the U.K. to subvert its sovereignty in
significant ways (i.e., accepting EU regulation) in order to access the EU Common Market. Third,
the most politically palatable way to re-do the referendum is to put a U.K.-EU deal up to the people
to decide, which means that Corbyn first has to spend a long time negotiating that deal.
The market may be disappointed to find out that PM Corbyn is not willing or able to put the question
of the U.K.’s EU exit up to a vote right away. Instead, the market would have to deal with Corbyn’s
economic policies, which are markedly left-wing. Corbyn harkens back to the 110 Propositions pour
la France of French President François Mitterrand, if not exactly to the ghastly 1970s of the U.K.’s
own history. A brief sample platter of Labour’s proposals under Corbyn includes:
15

Please see BCA Geopolitical Strategy, “Strategic Outlook 2017: We Are All Geopolitical Strategists Now,” dated December 14,
2016, available at gps.bcaresearch.com.

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

11
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

Corbyn is not
kidding about
socialism.

FF

Increasing the U.K. corporate tax rate to
26% from 20%;

FF

Increasing the minimum wage;

FF

Forcing companies not to out-source operations;

FF

Nationalizing public infrastructure companies.

How should investors play a Corbyn victory? We
think that the U.K. pound would likely rally on a
higher probability of reversing Brexit. However,
this “no Brexit” rally would quickly dissipate
as PM Corbyn reiterated his promise to fulfill
the democratic desire of the population to exit
the EU. While Corbyn’s negotiating team set
to work on getting a better Brexit deal out of
Brussels, the market would quickly turn its attention to the reality that Corbyn is not kidding
about socialism.16 The result would be a selloff
in the pound.

CHART 13

Pound Valuation Reflects
Post-Brexit Paradigm
BRITISH POUND:
REAL EFFECTIVE EXCHANGE RATE*
FAIR VALUE**
SIGMA BANDS
130

130

120

120

110

110

100

Post-Brexit
is a new era

90

100

90
© BCA Research 2017

06

08

10

12

14

16

18

* SOURCE: IMF, BASED ON CONSUMER PRICES.
** BASED ON RELATIVE PRODUCTIVITY TRENDS, U.K. REAL HOUSE
PRICES, AND BOND YIELD DIFFERENTIALS.

Bottom Line: BCA’s Foreign Exchange Strategy has pointed out that the pound remains well below
its fair value (Chart 13). However, as BCA’s chief FX strategist Mathieu Savary points out, the valuation technicals may be misleading as the currency has entered a new economic, trade, and political
paradigm. A Corbyn premiership is not clearly positive for Brexit, while opening up a completely
different question: is the U.K. also exiting the free-market, laissez-faire paradigm that it has helped
lead since May 1979?

Black Swan 4: Italy Is A Black Swan Hiding In Plain Sight
The spread between Italian and German 10-year government bonds has narrowed 72 basis points
since April, suggesting that investors have grown comfortable with the risks associated with the
Italian election due by May (Chart 14). There are three reasons why we agree with the market:
FF

New electoral rules passed in October make it highly likely that a center-right alliance will
take shape between the Forza Italia of former Prime Minister Silvio Berlusconi and the mildly
Eurosketpic Lega Nord. These two could form a government alone, or in a grand coalition with
the center-left Democratic Party (PD) (Chart 15).

16

To help investors get ready for a Corbyn premiership, we thought his appearance on President Nicolás Maduro’s weekly radio show
would be a good place to start: https://www.youtube.com/watch?v=7eL8_wtS-0I

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

12
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

Investors
have grown
comfortable
with the risks
associated
with the
Italian
election due
by May.

CHART 14
BPs

CHART 15

Investors Not Worried About Italy
ITALY VERSUS GERMANY:
10-YEAR GOVERNMENT BOND SPREAD

220

BPs

220

200

%

50

Italy Set For A Hung Parliament

%

ITALIAN OPINION POLLS:
M5S
CENTER-LEFT*
CENTER-RIGHT**

50

200

180

40

40

30

30

20

20

180

160

160

140

140

© BCA Research 2017

© BCA Research 2017
JAN

APR

JUL

2017

OCT

14

16

18

* INCLUDES DEMOCRATIC PARTY, DEMOCRATIC AND PROGRESSIVE
MOVEMENT, PROGRESSIVE CAMP, AND POPULAR ALTERNATIVE.
** INCLUDES LEGA NORD, FORZA ITALIA, AND BROTHERS OF ITALY.
SOURCE: VARIOUS POLLING AGENCIES.

FF

Both Lega Nord and the anti-establishment Five Star Movement (M5S) have moved to the center
on the questions of European integration and membership in the currency union;

FF

The European migration crisis is over and its supposedly constant impact on Italy is waning
(Chart 16). Meanwhile, Italy’s economy is on the mend, with its banking sector finally following
the Spanish trajectory with a drop in non-performing loans (Chart 17).

That said, we continue to warn clients that the underlying support for the common currency is
lagging in Italy. The support level is just above 55%, despite a strong rally in the rest of the Euro
Area (Chart 18). Similarly, over 40% of Italians appear confident in the country’s future outside of
the EU (Chart 19).
Our baseline case is that Italian elections will produce a weak and ineffective government, though
crucially not a Euroskeptic one. How could we be wrong?
Easy: one of the three reasons why we agree with the market could shift. For example, M5S could
alter its pledge to remain in the Euro Area and surprisingly win on a Euroskeptic platform. Why
would the party do something like that? Because it makes sense!

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

13
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

The
underlying
support
for the
common
currency is
lagging in
Italy.

CHART 16
Th

CHART 17

Migration Crisis Is Over (Yes, Even In Italy)
FOR BOTH PANELS:
ASYLUM SEEKERS
HISTORICAL RANGE*
AVERAGE
2017

180

Th

%

Italian Recovery Is Just Starting
NON-PERFORMING LOANS
(AS A % OF TOTAL LOANS):
ITALY
SPAIN*

14
180

EU-28
140

140

100

100

60

60

%
14

10

10

6

6

2

2
© BCA Research 2017

10

12

14

16

18

20

* REBASED AND LAGGED TO THE PEAK OF ITALIAN DEBT.

Th

Th

CHART 18

ITALY
%
12

Italians Stand Out For Distrust Of Euro
PERCENT OF RESPONDENTS
IN FAVOR OF THE EURO:
ITALY
EURO AREA*

12
85

10

10

8

%

85

80

80

75

75

70

70

65

65

60

60

55

55

8

6

6

4

4

© BCA Research 2017
JAN

APR

JUL

2017

OCT

* AVERAGE OF 2014, 2015, AND 2016.
SOURCE: EUROSTAT.

editor@bcaresearch.com •

© BCA Research 2017

02

04

06

08

10

12

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

14

16

* EQUALLY-WEIGHTED AVERAGE OF GREECE, SPAIN, FRANCE,
GERMANY, PORTUGAL, BELGIUM, THE NETHERLANDS, AND AUSTRIA.
SOURCE: EUROBAROMETER.

14
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

Italian
election risk
is completely
unappreciated
by the
markets.

CHART 19
%

60

CHART 20

Italians Not Enthusiastic About EU

Can MIB Keep Outperforming?

%

ITALY
PERCENT OF RESPONDENTS WHO THINK THEIR
COUNTRY COULD BETTER FACE THE FUTURE
OUTSIDE OF THE EU:
AGREE
DISAGREE
DON'T KNOW

ITALIAN EQUITIES RELATIVE TO
EUROPEAN EQUITIES
108

108

104

104

100

100

96

96

60

40

40

20

20

© BCA Research 2017

13

14

15

16

17

SOURCE: EUROBAROMETER.

© BCA Research 2017
JAN

APR

JUL

2017

OCT

NOTE: SERIES REBASED TO JAN. 2017 = 100.
SOURCE: THOMSON REUTERS/DATASTREAM.

Polls are already showing that M5S’s recent moderation on the euro is not paying political dividends,
with its support sharply sliding since the summer. With power quickly slipping out of reach for the
party, why wouldn’t they put a down-payment on the next election by trusting the underlying trend
in opinion polling and investing in a Euroskeptic platform that might pay political dividends in
the future? If we think that this strategy makes sense based on the data, then the M5S leadership
might as well.
Another scenario is a major terror attack perpetrated by recent migrants from North Africa. Italy
has been spared from radical Islamic terror. As such, the country may not be as desensitized to it
as other European nations. A strong showing by Lega Nord and the far-right Fratelli d’Italia could
force Forza Italia to move to the right as well.
On our travels, we have noticed that few investors want to talk about Italy. There is wide acknowledgement of the structural trends pointing to a rise of Euroskepticism in the country, but also an
appearance of consensus that this is a problem for a later date. We agree with this consensus, but
our conviction is low.
Bottom Line: Italian election risk is completely unappreciated by the markets. The country’s equity
market is one of the best performing this year (Chart 20), while government bonds are pricing in
no political risk as the election approaches. We believe that shorting both would present a good
hedging opportunity.

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

15
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

Chinese
policy-induced credit
contraction
will be
negative for
emerging
markets.

CHART 22

CHART 21
% of
GDP

When China Sneezes, EM Gets The Flu
FOR BOTH PANELS:
CHINA BROAD MONEY* (M3) IMPULSE
(ADVANCED BY 9 MONTHS, LS)
EXPORTS TO CHINA IN US$** (RS)

Ominous Signal From EM/JPY

Ann%
Chg

Ann%
Chg

GLOBAL NOWCAST* (LS)
CARRY CANARY INDICATOR**
(ADVANCED BY 3-MONTHS, RS)

40

120
8

KOREA AND TAIWAN

?

20

80

40
10

0

20
4

0

0

-4
-20

0
-40

-8
© BCA Research 2017

EMERGING MARKETS***
EXCLUDING KOREA AND TAIWAN

% of
GDP

Ann%
Chg

80

20

2000

02

04

06

08

10

12

14

16

18

* BASED ON ISM NEW ORDERS-TO-INVENTORY RATIO, U.S.
INTERMODAL FREIGHT CARLOADS, U.S. HIGH-YIELD OAS FOR
INDUSTRIALS, EUROPEAN BUSINESS CONFIDENCE, JAPANESE
BUSINESS CONFIDENCE FOR SMALL/MEDIUM-SIZED ENTERPRISES,
CHINESE FINANCIAL CONDITIONS, KOREAN EXPORTS, BALTIC
DRY INDEX, GLOBAL EARNINGS-TO-INVENTORY RATIO, AND
GLOBAL INDUSTRIALS/CONSUMER STAPLES RELATIVE EQUITY
PERFORMANCE.
** AVERAGE TOTAL RETURN OF RUB/JPY, ZAR/JPY AND BRL/JPY.
REBASED TO 100 ON JANUARY 2000.

60

40

10

20

0
0
-20
© BCA Research 2017

08

10

12

14

16

18

*

BCA CALCULATION: AGGREGATE OF NON-FINANCIAL INSTITUTION
& HOUSEHOLD DEPOSITS, OTHER FINANCIAL CORPORATION
DEPOSITS, AND OTHER LIABILITIES.
SOURCE: PBoC STATISTICS OF COMMERCIAL BANKS.
** SHOWN AS A 3-MONTH MOVING AVERAGE.
*** INCLUDING BRAZIL, CHILE, MEXICO, COMLUMBIA, PERU, INDIA,
INDONESDIA, MALAYSIA, PHILLIPINES,THAILAND, RUSSIA,
CZECH REPUBLIC, POLAND, HUNGARY, TURKEY, AND SOUTH AFRICA.

17

Please see BCA Foreign Exchange Strategy, “Canaries In
The Coal Mine Alert: EM/JPY Carry Trades,” dated December
1, 2017, available at fes.bcaresearch.com.

editor@bcaresearch.com •

Black Swan 5:
Bloodbath In Latin America
Our last black swan risk is not really a black
swan to us but a forecast we believe will
happen. As we outlined last month, we fear
that Chinese policy-induced credit contraction will be negative for emerging markets,
as BCA’s Emerging Markets Strategy data
asserts (Chart 21). BCA’s Foreign Exchange
Strategy has pointed out in its latest missive
that its “Carry Canary Indicator” – performance of EM/JPY crosses – is signaling that
a sharp deceleration in global growth is coming in Q1 2018 (Chart 22).17 Latin America
(especially Chile, Peru, and Brazil) is the
region most exposed to the combination of a
slowing China and a China-induced drop in
commodity prices.

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

16
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

CHART 23
%

70

CHART 24

There Is No Pro-Market Option In Brazil
BRAZIL
PRESIDENTIAL CANDIDATES:
ANTI-MARKET*
PRO-MARKET**
UNDECIDED

%

50%
%

AMLO Is In The Lead …
MEXICO: GENERAL ELECTION OPINION POLLS
BY PROBABLE CANDIDATE
OBRADOR
ZAVALA
CHONG
MANCERA
CALDERÓN

70

40
40%
60

60

50

50

40

40

30

30

20

20

30%
30

20
20%

10%
10
10

NOV-17

OCT-17

SEP-17

AUG-17

2017

© BCA Research 2017

JUL-17

2016

* INCLUDES MARINA SILVA, LUIZ LULA, AND JAIR BOLOSONARO.
** INCLUDES GERALDO ALCKMIN AND CIRO GOMES.
SOURCE: VARIOUS POLLING AGENCIES.

0%

JUN-17

© BCA Research 2017

MAY-17

10

APR-17

If the
“median
voter” in
Brazil
supported
reforms, the
current Temer
administration would
have passed
them already.

SOURCE: VARIOUS POLLING AGENCIES.

From a political perspective, this is most negative for Brazil and Mexico. Both countries hold elections in 2018, with the Mexican election further complicated by the ongoing NAFTA renegotiations.
We believe that the future of NAFTA hangs in the balance, with a high probability that the Trump
administration will decide to abrogate the deal.18
Currently, anti-market political forces are in the lead in both countries. In Brazil, no pro-market
candidate is leading in the polls (Chart 23). In fact, anti-market options have a 48% lead on the
centrists. Granted, there are ten months until the election, but we are skeptical that the Brazilian
population will change its mind and support reformers. If the “median voter” in Brazil supported
reforms, the current Temer administration would have passed them already.
In Mexico, anti-establishment candidate Andrés Manuel López Obrador (also known as AMLO) is
leading in the polls (Chart 24), as is his new party Morena (Chart 25). If Morena wins the most
seats in the Mexican Congress, it will be more difficult for the opposition parties to combine to
counter it.19

18

Please see BCA Geopolitical Strategy and Global Investment Strategy, “NAFTA – Populism Vs. Pluto-Populism,” dated November
10, 2017, available at gps.bcaresearch.com.

19

Please see BCA Geopolitical Strategy and Emerging Markets Strategy “Update On Emerging Markets: Malaysia, Mexico, And The
United States Of America,” dated August 9, 2017, available at gps.bcaresearch.com.

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

17
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

We do not
think the
EM rally is
sustainable
in 2018.

In 2017, we argued that politics were not a
tailwind for EM asset performance. Instead,
investors chased yield in the favorable economic context of Chinese economic stimulus,
low developed market yields, and a weak U.S.
dollar. In reality, politics was just as dire in
much of EM as it was in prior years of asset
underperformance, but the surge of global
liquidity in 2018 masked the problems.
We do not think the EM rally is sustainable in
2018. As the global economic and market context shifts, investors will start paying attention.
Suddenly, political problems will enter into
focus. Here we argue that Brazil and Mexico
are likely to be the main targets of portfolio
outflows, but a strong case could be made for
South Africa and Turkey as well.20
Bottom Line: Political risk in Latin America
will return.

CHART 25
40%
%
35%
35

…As Is Morena
MEXICO: GENERAL ELECTION OPINION POLLS
MORENA
PRI
PAN
PRD

30%
30

25%
25

20%
20

15%
15

10%
10

5%5
© BCA Research 2017

0%
MAR-16

JUL-16

NOV-16

MAR-17

JUL-17

NOV-17

SOURCE: VARIOUS POLLING AGENCIES.

Marko Papic, Senior Vice President
Chief Geopolitical Strategist
marko@bcaresearch.com

20

Please see BCA Geopolitical Strategy, “South Africa: Crisis Of Expectations,” dated June 28, 2017, and “Turkey: Military Adventurism
And Capital Controls,” dated December 7, 2016, available at gps.bcaresearch.com.

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

18
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

Discover
what you
can do
with BCA
Analytics.

We Read (And Liked) … Inside China’s Shadow Banking: The Next Subprime Crisis?
Just as black swans refer to low-probability, high-impact risks, gray rhinos, as defined by Michele Wucker,
refer to high-probability, high-impact risks. The idea of the “gray rhinoceros” went viral this summer after
China’s Communist Party mouthpiece, The People’s Daily, published an editorial in mid-July warning
that the country’s financial regulators needed to maintain a “sense of urgency” in combating financial
risks. They warned “both against the ‘black swan,’ but also against the ‘gray rhinoceros,’ [as] all kinds
of risk signs cannot be taken lightly.”
China’s propaganda chiefs wrote this editorial the week after the National Financial Work Conference,
an important congregation of China’s top financial authorities and other policymakers that occurs once
every five years and sets the trajectory for financial regulation and reforms. This year’s meeting made
the significant conclusion that China’s various financial regulators needed to be better controlled by
the central bank, better coordinated amongst each other, and more effective in tackling the build-up of
systemic financial risks in the economy. It was the culmination of a wave of policy tightening that began
in October 2016 in the property sector, expanded in December 2016, and intensified in April with a
special Politburo meeting.
That gray rhinos are obvious entails that much has been written about them already. This is certainly
true of Chinese financial risks. So to get a better understanding of China’s attempt to tackle its financial
gray rhinos, we thought we would turn to an earlier account of the problem: Joe Zhang’s Inside China’s
Shadow Banking: The Next Subprime Crisis?1 Despite the alarmist title, this short book is insightful, not
over-argued, and provides a useful primer in shadow banking and a helpful benchmark given the explosive
growth in the sector both before and after the book’s publication in 2014.
Joe Zhang is a corporate exec and editorialist with a background in prominent investment banks and
an early stint in China’s central bank. The book is more engaging than one might expect of an extended
analysis of China’s shadow sector because it mixes this analysis with Zhang’s personal memoir about his
venture as chairman of Wansui Micro Credit in Guangzhou from 2011-12.
Zhang’s style is admirably frank. Responding to criticisms that microcredit should focus on alleviating
poverty rather than making profits, he responds, “Microcredit is just a business, like any other business.
Does it hurt the poor? I don’t know. But an equally funny question is, does a department store make
consumers poorer?”
His candor is especially an asset when it comes to dealing with the realities (I should say disappointments) of China’s centrally planned economy and constant promises of deeper market-oriented reform.
Speaking to a group of college graduates, Zhang warns, “in the 1980s, the government made us believe
that liberalization of interest rates and, indeed, the Renminbi was only 5 years away. Those five years
have never ended. The five-year targets have become constant rolling targets.”
The book does not really answer the question in the subtitle, whether China faces a subprime crisis. Instead it argues that the real dangers lie in the country’s ballooning corporate leverage, within the property
sector and local governments, and that shadow banking compounds these risks because developers and
local government financing vehicles are the biggest users of it.
The gist of the argument is structural and as relevant today as in the heady days of the credit splurge
when Zhang ran his microcredit firm: shadow banking is a symptom, not a cause, of China’s financial
1

Honolulu: Enrich Professional Publishing, 2014, 166 pages.

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

19
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

disease. Financial repression is the cause. Nominal wage growth is much higher than underlying labor
productivity. Excessive state control of interest rates entails the suppression of deposit rates beneath the
long-term inflation rate. Negative real rates drive savers into the property market and alternative investments. State control of lending rates prevents small, risky and private firms from accessing credit. The
shadow sector thus emerges to mediate between the vast savings looking to escape inflation and these
underprivileged firms.
As a result, a “dual credit market” has emerged, one for formal and privileged borrowers, the other for
informal underdog borrowers. A war between regulators and financial innovators has also emerged, with
regulators often thwarting themselves because of overlapping and inefficient bureaucracy, while also
squelching small business growth and innovation.
The solution, if the government wishes to support SMEs, savers, and disadvantaged borrowers (i.e. all
those who suffer from excessive money and credit because they lack real assets that are appreciating
with inflation) is for the People’s Bank of China to embark on a genuine rate hike cycle, reining in money
growth, dis-inflating the economy and cutting back on the waste of resources. “Unfortunately,” Zhang
admits, “rising unemployment rates will be a by-product.”
There’s the rub. China needs to tighten policy without inducing a recession and wave of unemployment
that would jeopardize stability and Communist Party supremacy.
This is where Zhang’s book becomes relevant to today, a time when the central bank and financial regulators are addressing the very lack of coordination that Zhang identifies, and are preparing to upgrade their
coordinated campaign against excessive liquidity, leverage, and financial innovation. The centralizing and
pro-state aspect of this campaign is undoubtedly repugnant to Zhang, even as the gradual liberalization
of interest rates and tightening of monetary conditions is necessary in his view.
The critical question lies in the state’s tolerance for pain. Has anything changed? One of Zhang’s key
assumptions is that China’s collective leadership model is inherently risk averse. “No one great man or
great entity can force the necessary changes. It will require national consensus.” After Xi Jinping’s extraordinary consolidation of power since 2012, however, this model has evolved. If it is true, as Xi and
his top economic planners have acknowledged, that China’s financial stability is a national systemic risk,
then it cannot be assumed that China’s talk of financial tightening, this time around, is merely talk.
Either way, Zhang should get the credit both for spotting the gray rhino early on and describing it clearly
and accurately for those of us trying to understand the ramifications of the state’s attempt to regulate
and regularize it in 2018. He runs the gamut of the formal and informal financial sector, explaining the
mechanics of non-bank entities, like pawnshop lenders, microcredit firms, trust companies, and guarantee
companies, and their relations with local governments and larger state-owned commercial banks. And
while he cannot avoid the alphabet soup of Chinese finance – AMCs, P2P lenders, IPOs, WMPs, etc – in
each instance he clarifies rather than obscures the inner workings of the system.

Matt Gertken, Associate Vice President
Geopolitical Strategy
mattg@bcaresearch.com

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

20
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

Discover
what you
can do
with BCA
Analytics.

GEOPOLITICAL CALENDAR
DATE

COUNTRY

EVENT

IMPORTANCE

THREE MOST IMPORTANT EVENTS FOR DECEMBER:
DEC 8, 12,
2017

U.S.

U.S. BUDGET, DEBT CEILING, AND SPECIAL ELECTION

HIGH

The Republicans are in the process of negotiating a joint tax bill between the two legislative houses even as they seek a continuing resolution to
fund the government in lieu of 2018 fiscal appropriations. The debt ceiling is unlikely to be breached because neither party could withstand the
public backlash if the federal government failed to deliver on social payments. But a partial government shutdown could ensue, particularly if the
Democrats insist on resolving the status of “Dreamers,” illegal immigrants who came to the U.S. as children, ahead of the March 2018 deadline
that Trump has given Congress on the matter. Meanwhile, the Alabama special election on Dec. 12 could see the Republican majority in the Senate
reduced to a single seat if scandal-tainted Roy Moore loses to Democratic challenger Doug Jones. A GOP loss could jeopardize the tax bill if it has
not passed by Jan. 3, 2018.
DEC 12, 2017

U.S., IRAN, ISRAEL

CONGRESS TO DECIDE WHETHER TO REIMPOSE IRAN SANCTIONS

HIGH

President Trump on Oct 13 decertified Iran’s full implementation of the 2015 nuclear agreement under the U.S.’s Iran Nuclear Agreement Review
Act. This gave Congress 60 days to determine whether to impose new sanctions. Congress may demur from new sanctions. The bigger question
is whether Trump will use unilateral executive action to scrap the agreement, which would significantly increase geopolitical risks in the Middle
East. Trump could also shift the U.S.-recognized capital of Israel to Jerusalem on Dec. 11, setting off a firestorm in the Muslim world.
DEC 2017

CHINA

CENTRAL ECONOMIC WORK CONFERENCE

HIGH

The annual economic meeting sets targets and policies for the year ahead. This is the first such meeting after President Xi Jinping’s consolidation
of power and reaffirmation of his “reform” agenda at the 19th National Party Congress. The question is not whether the GDP growth target will be
lower, but whether there will be one at all. Also, will credit and monetary policies tighten up? Finally, will any leaks about other reform priorities
for 2018 trickle out of the meeting -- such as financial regulation, property curbs, local government debt controls, SOE restructuring, or a new raft
of overcapacity cuts?
DEC 6, 2017

GCC, QATAR

DEC 9, 2017

INDIA

DEC 11, 2017

RESULT OF GULF COUNTRY SUMMIT ON QATAR EMBARGO
GUJARAT STATE ELECTION DUE

US, ISRAEL, PALESTINE TRUMP MAY RECOGNIZE JERUSALEM AS CAPITAL OF ISRAEL

DEC 12, 2017

FRANCE, WORLD

DEC 12-13,
2017

U.S.

DEC 14, 2017

EURO AREA

DEC 14-15,
2017

U.K., EU

DEC 16-20,
2017

SOUTH AFRICA

DEC 20-21,
2017

JAPAN

INTERNATIONAL CLIMATE SUMMIT

MEDIUM
HIGH
HIGH
MEDIUM

FEDERAL RESERVE OPEN MARKET COMMITTEE MEETS

HIGH

ECB GOVERNING COUNCIL HOLDS MONETARY POLICY MEETING

HIGH

EUROPEAN COUNCIL MEETING; SECOND DEADLINE FOR FIRST-PHASE
BREXIT TALKS

HIGH

RULING ANC'S ELECTIVE CONFERENCE TO CHOOSE NEW LEADERS AND
PARTY CHAIR

HIGH

BOJ MONETARY POLICY COMMITTEE MEETS

HIGH

DEC 31, 2017

U.K.

BREXIT PRINCIPLES AGREED WITH EU (TENTATIVE DEADLINE)

HIGH

DEC 31, 2017

U.S.

TAX BILL PASSES CONGRESS (TENTATIVE DEADLINE)

HIGH

DEC 31, 2017

U.S., CANADA, MEXICO TENTATIVE DEADLINE FOR NAFTA RENEGOTIATION

DEC 31, 2017

editor@bcaresearch.com •

GREECE, EU, IMF

TENTATIVE DEADLINE FOR IMF TO DECIDE ON FURTHER GREEK BAILOUT
PARTICIPATION

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

HIGH

HIGH

21
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

DATE

COUNTRY

2018

BAHRAIN

PARLIAMENTARY ELECTIONS (UNSCHEDULED)

LOW

2018

THAILAND

PARLIAMENTARY ELECTIONS; RETURN TO CIVILIAN RULE

HIGH

2018

EVENT

BRICS, SOUTH AFRICA TENTH BRICS SUMMIT TO BE HELD IN JOHANNESBURG

2018

SLOVENIA

IMPORTANCE

LOW

GENERAL ELECTION

LOW

BOJ MONETARY POLICY COMMITTEE MEETS

HIGH

ECB GOVERNING COUNCIL HOLDS MONETARY POLICY MEETING

HIGH

PRESIDENTIAL ELECTION

LOW
HIGH

JAN 22, 2018

JAPAN

JAN 25, 2018

EURO AREA

JAN 28, 2018

FINLAND

JAN 30, 2018

U.S.

FEDERAL RESERVE OPEN MARKET COMMITTEE MEETS

FEB 2018

CUBA

NATIONAL ASSEMBLY ELECTION (UNSCHEDULED)

FEB 8, 2018

EGYPT

EARLIEST DATE OF PRESIDENTIAL ELECTION; MAY 8 IS DEADLINE

HIGH

WINTER OLYMPICS, PYEONGCHANG

HIGH

ECB GOVERNING COUNCIL HOLDS MONETARY POLICY MEETING

HIGH

BOJ MONETARY POLICY COMMITTEE MEETS

HIGH

MEDIUM

FEB 9-25, 2018

SOUTH KOREA

MARCH 8, 2018

EURO AREA

MARCH 9, 2018

JAPAN

MARCH 11, 2018

COLOMBIA

PARLIAMENTARY ELECTION DUE

MARCH 17, 2018

AUSTRALIA

SOUTH AUSTRALIA STATE ELECTION

LOW

MARCH 18, 2018

RUSSIA

GENERAL ELECTION

HIGH

MEDIUM

Russian President Vladimir Putin’s re-election is a foregone conclusion, so the real question is whether the election will usher in any policy shifts,
such as domestic economic reforms or improved relations with Europe or the U.S.
MARCH 20,
2018
MARCH 22-23,
2018

U.S.
EU

FEDERAL RESERVE OPEN MARKET COMMITTEE MEETS

HIGH

EUROPEAN COUNCIL MEETING

HIGH

MARCH 27,
2018

COLOMBIA

PRESIDENTIAL ELECTION

MEDIUM

APRIL-MAY
2018

HUNGARY

PARLIAMENTARY ELECTION DUE

MEDIUM

APRIL-MAY
2018

IRAQ

APRIL 8, 2018

JAPAN

GENERAL ELECTION DUE

HIGH

BOJ GOV KURODA TERM EXPIRES

HIGH

His reappointment is legal and likely, although not standard. Deputy governors Kikuo Iwata and Hiroshi Nakaso are also up for a possible second term.
APRIL 13-14,
2018

OAS, PERU

APRIL 26, 2018

EURO AREA

APRIL 26, 2018

JAPAN

MAY 2018

LEBANON

EIGHTH SUMMIT OF THE AMERICAS TO BE HELD IN LIMA

LOW

ECB GOVERNING COUNCIL HOLDS MONETARY POLICY MEETING

HIGH

BOJ MONETARY POLICY COMMITTEE MEETS

HIGH

PARLIAMENTARY ELECTIONS (UNSCHEDULED)

LOW
HIGH

MAY 2, 2018

U.S.

FEDERAL RESERVE OPEN MARKET COMMITTEE MEETS

MAY 3, 2018

U.K.

LOCAL ELECTIONS

MAY 8, 2018

EGYPT

PRESIDENTIAL ELECTION DUE

MEDIUM
HIGH

Egypt is a major power in the Middle East and a potential geopolitical “black swan.” It is still struggling to maintain stability in the wake of the
Arab Spring, the coup that brought General Sisi to power, and the fanning out of ISIS fighters after their defeat in Syria. Badly needed structural
economic reforms are also imposing pain on the populace.

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

22
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

Discover
what you
can do
with BCA
Analytics.

DATE
MAY 20, 2018

COUNTRY
ITALY

EVENT
GENERAL ELECTION DUE

IMPORTANCE
HIGH

Italian elections are the highest probability risk to European integration at the moment. Italian opinion polling reveals that Italians are the most
skeptical of the euro, and most optimistic about life outside the EU, than any EU member other than the U.K., which of course is leaving the common market. Moreover, the anti-establishment Five Star Movement is neck-in-neck with the ruling Democratic Party, though it has moderated
somewhat on euro membership. We do not think Italy will ultimately leave, but the elections will have a messy result. Eventually a market riot may
be necessary to snap Italy back into the union.
MAY 27, 2018

COLOMBIA

MAY 28, 2018

INDIA

JUNE 2018

INDONESIA

JUNE 2018

SOUTH KOREA

JUNE 5, 2018

PAKISTAN

JUNE 8-9, 2017

G7, CANADA

JUNE 13, 2018

U.S.

JUNE 28, 2018

CHINA, HK, BRI

JUNE 28-29,
2018

EU

JULY 1, 2018

MEXICO

PRESIDENTIAL ELECTION

MEDIUM

KARNATAKA STATE ELECTION DUE

MEDIUM

LOCAL ELECTIONS (UNSCHEDULED)

MEDIUM

LOCAL ELECTIONS

MEDIUM

GENERAL ELECTION EARLIEST DATE (DUE BY SEPT 3)

MEDIUM

G7 SUMMIT AT CHARLEVOIX, QUEBEC

MEDIUM

FEDERAL RESERVE OPEN MARKET COMMITTEE MEETS
BELT AND ROAD INITIATIVE (BRI, OBOR) SUMMIT IN HONG KONG

HIGH
MEDIUM

EUROPEAN COUNCIL MEETING

HIGH

GENERAL ELECTION

HIGH

The Mexican election in 2018 will be a watershed moment. The top two candidates are the former wife of ex-President Felipe Calderon, Margarita
Zavala, and the left-wing firebrand Andres Manuel Lopez Obrador, better known by his acronym AMLO. A return of the center-right PAN to power,
which Zavala represents, would be market-positive. However, we do not think that AMLO would necessarily be a negative. While he is riding the
wave of anti-Trump sentiment, Obrador lacks support in the legislature for any truly dramatic policy changes. The question for investors, however,
is whether PAN can get enough seats in congress to effect and implement pro-market reforms.
JULY 7, 2018

AFGHANISTAN

JULY 11-12,
2018

NATO, BELGIUM

GENERAL ELECTION
NATO SUMMIT IN BRUSSELS

JULY 26, 2018

EURO AREA

ECB GOVERNING COUNCIL HOLDS MONETARY POLICY MEETING

JULY 29, 2018

CAMBODIA

GENERAL ELECTION

JULY 30, 2018

JAPAN

JULY 31, 2018

U.S.

LOW
MEDIUM
HIGH
MEDIUM

BOJ MONETARY POLICY COMMITTEE MEETS

HIGH

FEDERAL RESERVE OPEN MARKET COMMITTEE MEETS

HIGH

AUG 4, 2018

AUSTRALIA

SENATE ELECTION (EARLIEST)

AUG 24, 2018

MALAYSIA

GENERAL ELECTION DUE

MEDIUM
HIGH

Malaysia has seen the rise of a vibrant opposition movement for the first time in its history over the past ten years, but the opposition has had
bad luck with the election calendar. Under Prime Minister Najib Razak, the ruling Barisan Nasional coalition is regaining its dominant position and
cracking down on dissent. The next general election will witness a challenge to Najib from the ruling coalition’s erstwhile heavyweights, but Najib
is likely to prevail. Despite his government’s many ills, the recovery of commodity prices, and Najib’s structural reforms, bode well for the country
relative to other emerging markets.

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

23
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

DATE

COUNTRY

EVENT

IMPORTANCE

SEPT 2018

ZIMBABWE

GENERAL ELECTION DUE (UNSCHEDULED)

SEPT 3, 2018

PAKISTAN

GENERAL ELECTION DUE

MEDIUM

SEPT 9, 2018

SWEDEN

GENERAL ELECTION

MEDIUM

SEPT 13, 2018

EURO AREA

SEPT 18, 2018

JAPAN

SEPT 25, 2018

U.S.

LOW

ECB GOVERNING COUNCIL HOLDS MONETARY POLICY MEETING

HIGH

BOJ MONETARY POLICY COMMITTEE MEETS

HIGH

FEDERAL RESERVE OPEN MARKET COMMITTEE MEETS

HIGH

OCT 2018

ISRAEL

MUNICIPAL ELECTIONS

LOW

OCT 2018

U.K., EU

BREXIT TALKS TO CONCLUDE (TENTATIVE DEADLINE)

HIGH

Venezuela has descended into chaos since the death of strongman Hugo Chavez and the oil price slump of 2014. The socialist, military-backed
regime has deprived the legislature of its authority since the sweeping opposition victory in 2015. The timing of the election lies in question. Oil
production is likely to continue slipping while domestic unrest will continue to escalate.
OCT 7, 2018

BRAZIL

GENERAL ELECTION

HIGH

Brazil has witnessed the worst recession in a century and the impeachment of President Dilma Rousseff. Now her successor, interim President
Michel Temer of the Brazilian Democratic Movement Party, is engulfed in corruption allegations and political recriminations. This election could
potentially recapitalize the political system, enabling badly needed structural reform, or it could see the country go further down the road of economic populism.
OCT 18, 2018
OCT 18-19,
2018

VENEZUELA
EU

OCT 25, 2018

EURO AREA

OCT 31, 2018

JAPAN

NOV 2018
NOV 6, 2018

THAILAND
U.S.

GENERAL ELECTION DUE

HIGH

EUROPEAN COUNCIL MEETING

HIGH

ECB GOVERNING COUNCIL HOLDS MONETARY POLICY MEETING

HIGH

BOJ MONETARY POLICY COMMITTEE MEETS

HIGH

MILITARY JUNTA PLANS TO HOLD ELECTIONS, RETURN TO CIVILIAN
RULE (TENTATIVE)
MIDTERM ELECTION

HIGH

A major test for the Trump administration and congressional Republican majorities, given the problems of scandal and policy misfires. The Senate
is set to favor Republicans in this election cycle, and Democrats in Trump’s blue swing states are up for re-election, so Democratic strategy, the
youth vote, and the staying power of Trump’s electoral base will be put to the test.
NOV 8, 2018

U.S.

NOV 24, 2018

TAIWAN

NOV 24, 2018

AUSTRALIA

NOV 30 - DEC 1,
2018
DEC 13, 2018
DEC 13-14,
2018

editor@bcaresearch.com •

G20, ARGENTINA
EURO AREA
EU

FEDERAL RESERVE OPEN MARKET COMMITTEE MEETS
LOCAL ELECTIONS (ALTERNATELY DEC 1)
VICTORIA STATE ELECTION
G20 SUMMIT IN BUENOS AIRES

HIGH
MEDIUM
LOW
MEDIUM

ECB GOVERNING COUNCIL HOLDS MONETARY POLICY MEETING

HIGH

EUROPEAN COUNCIL MEETING

HIGH

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

24
252712

GEOPOLITICAL STRATEGY - SPECIAL REPORT DECEMBER 6, 2017

BCA RESEARCH INC.

Discover
what you
can do
with BCA
Analytics.

DATE

COUNTRY

DEC 18, 2018

U.S.

DEC 19, 2018
DEC 31, 2018

EVENT

IMPORTANCE

FEDERAL RESERVE OPEN MARKET COMMITTEE MEETS

HIGH

JAPAN

BOJ MONETARY POLICY COMMITTEE MEETS

HIGH

LIBYA

PARLIAMENTARY ELECTIONS DUE (TENTATIVE)

MEDIUM

2019

SOUTH AFRICA

GENERAL ELECTION DUE

HIGH

2019

INDIA

GENERAL ELECTION DUE

HIGH

2019

ARGENTINA

GENERAL ELECTION DUE

HIGH

2019

QATAR

LEGISLATIVE ELECTION DUE

2019

GREECE

GENERAL ELECTION DUE

2019

CHINA, BRI

MEDIUM
HIGH

SECOND BELT AND ROAD SUMMIT DUE

MEDIUM

JAN 7, 2019

INDIA

MADHYA PRADESH STATE ELECTION DUE

MEDIUM

JAN 20, 2019

INDIA

RAJASTHAN STATE ELECTION DUE

MEDIUM

FEB 16, 2019

NIGERIA

GENERAL ELECTION DUE

MEDIUM

MARCH 31,
2019

UKRAINE

PRESIDENTIAL ELECTION (GENERAL ELECTION DUE IN 2019)

MEDIUM

APRIL 17, 2019

INDONESIA

GENERAL ELECTION DUE

MAY 18, 2019

AUSTRALIA

SENATE ELECTION DUE

OCT 21, 2019

CANADA

GENERAL ELECTION DUE

HIGH

NOV 2, 2019

AUSTRALIA

GENERAL ELECTION DUE

MEDIUM

NOV 3, 2019

TURKEY

GENERAL ELECTION DUE

HIGH

NOV 5, 2019

ISRAEL

GENERAL ELECTION DUE

HIGH

editor@bcaresearch.com •

www.bcaresearch.com • Copyright © 2017 BCA Research Inc. All Rights Reserved. Refer to last page for important disclaimer.

Kamran Moghadam PARTNERS CAPITAL

HIGH
MEDIUM

25
252712

GLOBAL OFFICES

Copyright 2017, BCA Research Inc. All rights reserved.

Head Office – Montreal, Canada

The text, images and other materials contained or displayed on any BCA Research Inc. product, service, report, e-mail
or web site are proprietary to BCA Research Inc. and constitute valuable intellectual property. No material from any part
of any BCA Research Inc. web site may be downloaded, transmitted, broadcast, transferred, assigned, reproduced or in
any other way used or otherwise disseminated in any form to any person or entity, without the explicit written consent of
BCA Research Inc. All unauthorized reproduction or other use of material from BCA Research Inc. shall be deemed willful
infringement(s) of BCA Research Inc. copyright and other proprietary and intellectual property rights, including but not
limited to, rights of privacy. BCA Research Inc. expressly reserves all rights in connection with its intellectual property,
including without limitation the right to block the transfer of its products and services and/or to track usage thereof,
through electronic tracking technology, and all other lawful means, now known or hereafter devised. BCA Research Inc.
reserves the right, without further notice, to pursue to the fullest extent allowed by the law any and all criminal and civil
remedies for the violation of its rights.

1002 Sherbrooke Street West, Suite 1600
Montreal, Quebec, Canada H3A 3L6
TEL 1.800.724.2942 (514.499.9550)
FAX 1.800.843.1763 (514.843.1763)

London, U.K.

29 Ludgate Hill
London, U.K. EC4M 7JR
TEL +44 (0)207 556 6008
FAX +44 (0)207 827 6413

Non-residents of Canada confirm that they do not, and have never had the right to use any of BCA Research Inc.’s materials
in Canada, and agree that they have not and never will use any of the materials in Canada unless they acquire this right by
paying the applicable Canadian and Quebec sales taxes. All unauthorized use of the materials in Canada shall be deemed
willful infringement of BCA Research Inc. copyright and other proprietary and intellectual property rights.

New York, U.S.A.

1120 6th Avenue
6th Floor
New York, NY 10036
TEL 212 224 3669
FAX 212 224 3861

San Francisco, U.S.A.

580 California Street,
16th Floor
San Francisco, CA 94104
TEL 415 568 2123

Hong Kong

38/F., Hopewell Centre
183 Queen’s Road East
Wanchai, Hong Kong
TEL +852 2912 8055
FAX +852 2842 7007

Sydney, Australia

Level 19, 1 O’Connell Street
Sydney, Australia
NSW 2000
TEL +61 (02) 8249 1867
TEL +61 (02) 8249 1868
FAX +61 (02) 8249 1800

While BCA will use its reasonable best efforts to provide accurate and informative Information Services to Subscriber, BCA
cannot guarantee the accuracy, relevance and/or completeness of the Information Services, or other information used in
connection therewith. BCA, its affiliates, shareholders, directors, officers, and employees shall have no liability, contingent
or otherwise, for any claims or damages arising in connection with (i) the use by Subscriber of the Information Services
and/or (ii) any errors, omissions or inaccuracies in the Information Services. The Information Services are provided for the
benefit of the Subscriber. It is not to be used or otherwise relied on by any other person.
Some of the data contained in this publication may have been obtained from Bloomberg Barclays Indices; Bloomberg Finance L.P.;
CBRE Inc.; CEIC data; First Bridge Data LLC; Copyright @ 2017, IHS Markit; MSCI Inc. Neither MSCI Inc. nor any other party
involved in or related to compiling, computing or creating the MSCI Inc. data makes any express or implied warranties or
representations with respect to such data (or the results to be obtained by the use thereof), and all such parties hereby
expressly disclaim all warranties of originality, accuracy, completeness, merchantability or fitness for a particular purpose
with respect to any of such data. Without limiting any of the foregoing, in no event shall MSCI Inc., any of its affiliates or
any third party involved in or related to compiling, computing or creating the data have any liability for any direct, indirect,
special, punitive, consequential or any other damages (including lost profits) even if notified of the possibility of such
damages. No further distribution or dissemination of the MSCI Inc. data is permitted without MSCI Inc.’s express written
consent. Real Capital Analytics Inc.; Reis Services LLC; S&P Capital IQ; Standard and Poor’s (“S&P”) Copyright © 2017 The
McGraw-Hill Companies, Inc., S&P is a division of The McGraw-Hill Companies Inc. All rights reserved; or from THOMSON
REUTERS, “The THOMSON REUTERS Kinesis Logo and THOMSON REUTERS are trademarks of Thomson Reuters and its affiliated companies in the United States and other countries and used herein under license.” In addition to the foregoing,
Client shall display or print the following notice in the Help About section or in a general attribution page. “Copyright ©
Thomson Reuters, 2017. All Rights Reserved. Use, duplication, or sale of this service, or data contained herein, except as
described in the BCA Research products subscription agreement, is strictly prohibited.”

Cape Town, South Africa

7th Floor, Mandela Rhodes Place
Cnr of Wale and Burg Street
Cape Town, 8001
South Africa
TEL +27 21 403 6338

Important Disclaimer

São Paulo, Brazil

This publication is designed to provide information and analysis that BCA believes to be accurate, but it is published with
the understanding that neither the author nor the publisher is rendering investment advice, nor offering individualized
advice tailored to any specific portfolio or to any individual’s particular needs, nor offering professional services such as
legal or accounting advice. Anyone needing assistance in areas that include investment, legal, and accounting advice
should consult a competent professional’s services.

Rua Tabapuã, 422 - 4°andar conj. 43/44 - Cep: 04533001
São Paulo - SP - Brazil
TEL
+55 11 3074 2656
MOBILE +55 11 99484 5777
Dubai
5th Floor, The Palladium
Cluster C
Jumeirah Lake Towers,
Dubai, UAE
MOBILE +971 (0) 5430 58839

This publication does not constitute an offer to sell any security, nor a solicitation of an offer to buy any security. Only a
prospectus may be used to offer to sell or purchase securities, and a prospectus must be read and considered carefully
before investing or spending money.

This publication may reference historical performance data. Past results do not guarantee future performance. Additionally,
business conditions, laws, regulations, and other factors affecting performance all change over time, which could change
the status of the information in this publication.
This communication reflects our analysts’ opinions as of the date of this communication and will not necessarily be updated
as views or information change. BCA or its affiliated companies or their respective shareholders, directors, officers and/or
employees, may have long or short positions in the securities discussed herein and may purchase or sell such securities
without notice.
For important copyright, disclosure, disclaimer, and other information, including limitations on BCA’s liability, see our terms
and conditions, available here: http://www.bcaresearch.com/copyright.

Kamran Moghadam PARTNERS CAPITAL

252712

"}
